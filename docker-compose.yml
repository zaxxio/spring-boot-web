version: '3.8'
services:
  zookeeper:
    container_name: zookeeper
    restart: always
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "2181:2181"
    networks:
      - cloudNetwork

  kafka-1:
    container_name: kafka-1
    restart: always
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - cloudNetwork

  schema-registry:
    container_name: schema-registry
    restart: always
    image: confluentinc/cp-schema-registry:latest
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-1:19092"
      # SCHEMA_COMPATIBILITY: BACKWARD
      SCHEMA_COMPATIBILITY: FULL_TRANSITIVE
    depends_on:
      - zookeeper
      - kafka-1
    networks:
      - cloudNetwork

  # Kafka UI
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    depends_on:
      - zookeeper
      - kafka-1
    #      - kafka-2
    #      - kafka-3
    environment:
      KAFKA_CLUSTERS_0_NAME: Development
      #KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka-1:19092,kafka-2:19093,kafka-3:19094'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka-1:19092'
      DYNAMIC_CONFIG_ENABLED: 'true'
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: pass
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"
    networks:
      - cloudNetwork

  # Database Configuration
  postgresql-master:
    image: bitnami/postgresql
    restart: always
    ports:
      - '5432:5432'
    #    volumes:
    #      - postgresql_master_data:/bitnami/postgresql
    #      - ./db.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_USERNAME=${DB_USERNAME}
      - POSTGRESQL_PASSWORD=${DB_PASSWORD}
      - POSTGRESQL_DATABASE=${DB_NAME}
      - ALLOW_EMPTY_PASSWORD=yes

  #  # Postgres Slave
  #  postgresql-slave:
  #    image: bitnami/postgresql
  #    restart: always
  #    ports:
  #      - '5432'
  #    depends_on:
  #      - postgresql-master
  #    environment:
  #      - POSTGRESQL_PASSWORD=password
  #      - POSTGRESQL_MASTER_HOST=postgresql-master
  #      - POSTGRESQL_PGAUDIT_LOG=READ
  #      - POSTGRESQL_LOG_HOSTNAME=true
  #      - POSTGRESQL_REPLICATION_MODE=slave
  #      - POSTGRESQL_REPLICATION_USER=repl_user
  #      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
  #      - POSTGRESQL_MASTER_PORT_NUMBER=5432
  #      - ALLOW_EMPTY_PASSWORD=yes
  #    volumes:
  #      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@gmail.com
      PGADMIN_DEFAULT_PASSWORD: password

  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=username
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-data:/data/db

  mongo-express:
    container_name: mongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - "8086:8081"
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=username
      - ME_CONFIG_BASICAUTH_PASSWORD=password
      - ME_CONFIG_MONGODB_ADMINUSERNAME=username
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb

  axonserver:
    container_name: axonserver
    image: axoniq/axonserver:2023.2.3
    ports:
      - "8024:8024" # HTTP port
      - "8124:8124" # gRPC port
    environment:
      - AXONIQ_AXONSERVER_DEVMODE_ENABLED=true
      - AXONIQ_AXONSERVER_NAME=axonserver
      - AXON_SERVER_HOSTNAME=axonserver
      - AXON_SERVER_CONTEXT=default

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
#    container_name: elasticsearch-container
#    ports:
#      - 9200:9200
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#
#
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1

networks:
  cloudNetwork:
    name: cloudNetwork
    driver: bridge

volumes:
  mongo-data:
  postgres_data:
  mongo_data:
  postgresql_master_data:
    driver: local